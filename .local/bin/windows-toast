#! /usr/bin/env run-cargo-script

//! ```cargo
//! [dependencies]
//! structopt = "=0.2.13"
//! winrt-notification = "=0.2.2"
//! ```
#![deny(warnings)]

extern crate structopt;
extern crate winrt_notification;

use {
    std::{
        fmt::{
            Debug,
            Display,
            Formatter,
            Result as FmtResult,
        },
    },
    structopt::StructOpt,
};

#[derive(StructOpt)]
struct Cli {
    #[structopt(short, long)]
    title: Option<String>,
    #[structopt(short = "m", long)]
    text1: Option<String>,
    #[structopt(short = "n", long)]
    text2: Option<String>,
    #[structopt(short, long)]
    sound: Option<String>,
    #[structopt(short, long)]
    duration: Option<String>,
}

use winrt_notification::{Duration, Sound, Toast};

pub struct DisplayAsDebug<T: Display>(pub T);

impl<T: Display> Debug for DisplayAsDebug<T> {
    fn fmt(&self, f: &mut Formatter) -> FmtResult {
        write!(f, "{}", self.0)
    }
}

impl From<&'static str> for DisplayAsDebug<&'static str> {
    fn from(s: &'static str) -> Self {
        DisplayAsDebug(s)
    }
}

fn main() -> Result<(), DisplayAsDebug<&'static str>> {
    let Cli {
        title,
        text1,
        text2,
        sound,
        duration,
    } = Cli::from_args();

    let mut toast = Toast::new(Toast::POWERSHELL_APP_ID);

    if let Some(t) = title {
        toast = toast.title(&t);
    }

    if let Some(t) = text1 {
        toast = toast.text1(&t);
    }

    if let Some(t) = text2 {
        toast = toast.text2(&t);
    }

    if let Some(mut s) = sound {
        s.make_ascii_lowercase();
        toast = toast.sound(match s.as_ref() {
            "sms" => Some(Sound::SMS),
            "none" => None,
            _ => Err("incorrect sound name")?,
        });
    };

    if let Some(mut d) = duration {
        d.make_ascii_lowercase();
        let d = match d.as_ref() {
            "short" => Duration::Short,
            "long" => Duration::Long,
            _ => Err("incorrect duration name")?,
        };
        toast = toast.duration(d);
    }

    toast.show().expect("unable to toast");
    Ok(())
}
